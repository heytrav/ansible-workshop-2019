---

- import_playbook: sort-inventory-hosts.yml

- name: Upgrade application in place
  become: true
  hosts: app:&rollingupdate
  serial: 1
  any_errors_fatal: true
  tags:
    - app
  vars:
    database_host: "{{ (groups.db | intersect(groups.rollingupdate))[0] }}"

  tasks:

    - name: Disable application at load balancer
      haproxy:
        backend: catapp-backend
        host: "{{ web_server }}"
        state: disabled
      delegate_to: "{{ item }}"
      loop: "{{ groups.loadbalancer | intersect(groups.rollingupdate) }}"

    - name: Checkout application from git
      git:
        repo: https://github.com/heytrav/sample-flask-app.git
        dest: "{{ app_directory }}"
        version: "{{ app_version | default('v1') }}"
      notify: restart gunicorn

    
    - name: Add app config
      template:
        src: templates/config.py.j2
        dest: "{{ app_directory }}/config.py"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644
      notify: restart gunicorn

    - name: Install app requirements
      pip:
        requirements: "{{ app_directory }}/requirements.txt"
        virtualenv: "{{ app_directory }}/venv"

    - name: Install gunicorn
      pip:
        name: gunicorn
        virtualenv: "{{ app_directory }}/venv"

    - name: Add systemd config
      template:
        src: templates/gunicorn.service.j2
        dest: /etc/systemd/system/gunicorn.service
        owner: root
        group: root
        mode: 0644
      notify: restart gunicorn

    - meta: flush_handlers

    - name: Make sure gunicorn is accepting connections
      wait_for:
        port: 5000
        timeout: 60

    - name: Re-enable application at load balancer
      haproxy:
        backend: catapp-backend
        host: "{{ web_server }}"
        state: enabled
      delegate_to: "{{ item }}"
      loop: "{{ groups.loadbalancer | intersect(groups.rollingupdate) }}"


  handlers:
    - name: restart gunicorn
      systemd:
        name: gunicorn
        state: restarted

